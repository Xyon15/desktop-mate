"""
Bot Discord pour Desktop-Mate (Kira)

Bot Discord qui permet √† Kira de discuter sur Discord en utilisant :
- ChatEngine (Phase 5) pour g√©n√©rer les r√©ponses
- EmotionAnalyzer (Phase 6) pour d√©tecter les √©motions
- UnityBridge pour faire r√©agir l'avatar VRM

Fonctionnalit√©s :
- R√©ponse aux mentions (@Kira)
- Auto-reply dans canaux configur√©s
- Int√©gration compl√®te avec syst√®me IA Desktop-Mate
- Rate limiting pour √©viter spam
- R√©action √©motionnelle VRM en temps r√©el
"""

import os
import logging
import asyncio
import time
from typing import Dict, Optional
from datetime import datetime

import discord
from discord.ext import commands
from dotenv import load_dotenv

# Import modules Desktop-Mate
from src.ai.chat_engine import get_chat_engine
from src.ai.emotion_analyzer import get_emotion_analyzer
from src.ipc.unity_bridge import UnityBridge
from src.utils.config import Config

# Configuration du logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class KiraDiscordBot(commands.Bot):
    """
    Bot Discord pour Kira (Desktop-Mate)
    
    Permet √† Kira de discuter sur Discord en utilisant le syst√®me IA
    complet de Desktop-Mate (ChatEngine + EmotionAnalyzer + UnityBridge).
    """
    
    def __init__(
        self,
        chat_engine=None,
        emotion_analyzer=None,
        unity_bridge=None,
        config=None
    ):
        """
        Initialise le bot Discord Kira
        
        Args:
            chat_engine: ChatEngine pour g√©n√©rer r√©ponses (si None, utilise singleton)
            emotion_analyzer: EmotionAnalyzer pour √©motions (si None, utilise singleton)
            unity_bridge: UnityBridge pour VRM (si None, cr√©e nouvelle instance)
            config: Config pour param√®tres (si None, charge depuis config.json)
        """
        # Configuration Discord Intents
        intents = discord.Intents.default()
        intents.messages = True
        intents.message_content = True  # N√©cessaire pour lire contenu messages
        intents.guilds = True
        
        super().__init__(
            command_prefix="!",  # Prefix commands (m√™me si pas utilis√© pour l'instant)
            intents=intents,
            help_command=None  # D√©sactiver help par d√©faut
        )
        
        # Composants Desktop-Mate
        self.chat_engine = chat_engine or get_chat_engine()
        self.emotion_analyzer = emotion_analyzer or get_emotion_analyzer()
        self.unity_bridge = unity_bridge or UnityBridge()
        self.config = config or Config()
        
        # Configuration Discord depuis config.json
        discord_config = self.config.get("discord", {})
        self.auto_reply_enabled = discord_config.get("auto_reply_enabled", False)
        self.auto_reply_channels = discord_config.get("auto_reply_channels", [])
        self.rate_limit_seconds = discord_config.get("rate_limit_seconds", 3)
        
        # Rate limiting par utilisateur
        self.last_response_time: Dict[int, float] = {}
        
        # Statistiques
        self.start_time = datetime.now()
        self.messages_processed = 0
        self.responses_sent = 0
        
        logger.info(
            f"‚úÖ KiraDiscordBot initialis√© "
            f"(auto_reply={self.auto_reply_enabled}, "
            f"channels={len(self.auto_reply_channels)})"
        )
    
    async def on_ready(self):
        """Event d√©clench√© quand le bot est connect√© √† Discord"""
        logger.info(f"‚úÖ Bot Discord connect√© : {self.user.name} (ID: {self.user.id})")
        logger.info(f"üìä Connect√© √† {len(self.guilds)} serveur(s)")
        
        # Afficher serveurs
        for guild in self.guilds:
            logger.info(f"   - {guild.name} (ID: {guild.id})")
        
        # Status Discord
        activity = discord.Activity(
            type=discord.ActivityType.watching,
            name="Desktop-Mate üé≠"
        )
        await self.change_presence(activity=activity)
        
        logger.info("ü§ñ Kira est pr√™te √† discuter sur Discord ! üí¨")
    
    async def on_message(self, message: discord.Message):
        """
        Event d√©clench√© pour chaque message Discord
        
        Args:
            message: Message Discord re√ßu
        """
        # Ignorer nos propres messages
        if message.author == self.user:
            return
        
        # Ignorer les bots
        if message.author.bot:
            return
        
        self.messages_processed += 1
        
        # D√©terminer si on doit r√©pondre
        should_reply = self._should_reply_to_message(message)
        
        if not should_reply:
            return
        
        # V√©rifier rate limiting
        if not self._check_rate_limit(message.author.id):
            logger.debug(
                f"‚è±Ô∏è Rate limit : Ignorer message de {message.author.name} "
                f"(trop rapide)"
            )
            return
        
        # Nettoyer le prompt (enlever mention si pr√©sente)
        prompt = self._clean_prompt(message.content)
        
        if not prompt.strip():
            logger.debug("üìù Prompt vide apr√®s nettoyage, ignor√©")
            return
        
        # Afficher typing indicator pendant traitement
        async with message.channel.typing():
            try:
                # G√©n√©rer r√©ponse via ChatEngine
                response = await self._generate_response(
                    prompt=prompt,
                    user_id=str(message.author.id),
                    username=message.author.name
                )
                
                # Envoyer r√©ponse
                await message.channel.send(response)
                
                self.responses_sent += 1
                logger.info(
                    f"‚úÖ R√©ponse envoy√©e √† {message.author.name} "
                    f"({len(response)} chars)"
                )
                
            except Exception as e:
                logger.error(f"‚ùå Erreur g√©n√©ration/envoi r√©ponse : {e}")
                await message.channel.send(
                    "D√©sol√©e, j'ai rencontr√© une erreur... üòî"
                )
    
    def _should_reply_to_message(self, message: discord.Message) -> bool:
        """
        D√©termine si le bot doit r√©pondre √† un message
        
        Args:
            message: Message Discord
        
        Returns:
            True si doit r√©pondre, False sinon
        """
        # Cas 1 : Bot mentionn√© (@Kira)
        if self.user.mentioned_in(message):
            logger.debug(f"üí¨ Mention d√©tect√©e de {message.author.name}")
            return True
        
        # Cas 2 : Auto-reply activ√© dans ce canal
        if self.auto_reply_enabled and message.channel.id in self.auto_reply_channels:
            logger.debug(
                f"üí¨ Auto-reply activ√© dans canal {message.channel.name} "
                f"(ID: {message.channel.id})"
            )
            return True
        
        return False
    
    def _check_rate_limit(self, user_id: int) -> bool:
        """
        V√©rifie le rate limiting pour un utilisateur
        
        Args:
            user_id: ID utilisateur Discord
        
        Returns:
            True si peut r√©pondre, False si trop rapide
        """
        current_time = time.time()
        last_time = self.last_response_time.get(user_id, 0)
        
        # V√©rifier d√©lai minimum
        if current_time - last_time < self.rate_limit_seconds:
            return False
        
        # Mettre √† jour timestamp
        self.last_response_time[user_id] = current_time
        return True
    
    def _clean_prompt(self, content: str) -> str:
        """
        Nettoie le prompt en enlevant les mentions
        
        Args:
            content: Contenu message Discord
        
        Returns:
            Prompt nettoy√©
        """
        # Enlever mention du bot
        cleaned = content.replace(f"<@{self.user.id}>", "").strip()
        cleaned = cleaned.replace(f"<@!{self.user.id}>", "").strip()
        
        return cleaned
    
    async def _generate_response(
        self,
        prompt: str,
        user_id: str,
        username: str
    ) -> str:
        """
        G√©n√®re une r√©ponse via ChatEngine et met √† jour √©motions VRM
        
        Args:
            prompt: Message de l'utilisateur
            user_id: ID utilisateur Discord
            username: Nom utilisateur Discord
        
        Returns:
            R√©ponse g√©n√©r√©e
        """
        logger.info(f"ü§ñ G√©n√©ration r√©ponse pour {username} : '{prompt[:50]}...'")
        
        # G√©n√©rer r√©ponse avec ChatEngine (bloquant, √† ex√©cuter dans executor)
        loop = asyncio.get_event_loop()
        chat_result = await loop.run_in_executor(
            None,
            lambda: self.chat_engine.chat(
                user_input=prompt,
                user_id=user_id,
                source="discord"
            )
        )
        
        response_text = chat_result.response
        
        logger.info(
            f"‚úÖ R√©ponse g√©n√©r√©e : {len(response_text)} chars, "
            f"√©motion={chat_result.emotion}"
        )
        
        # Analyser √©motion avec EmotionAnalyzer avanc√©
        emotion_result = self.emotion_analyzer.analyze(
            text=response_text,
            user_id=user_id
        )
        
        logger.info(
            f"üé≠ √âmotion analys√©e : {emotion_result.emotion} "
            f"(intensit√©={emotion_result.intensity:.1f}, "
            f"confiance={emotion_result.confidence:.1f})"
        )
        
        # Envoyer √©motion √† Unity (si connect√©)
        self._send_emotion_to_unity(emotion_result.emotion, emotion_result.intensity)
        
        return response_text
    
    def _send_emotion_to_unity(self, emotion: str, intensity: float):
        """
        Envoie l'√©motion √† Unity pour mise √† jour VRM
        
        Args:
            emotion: √âmotion d√©tect√©e ('joy', 'angry', etc.)
            intensity: Intensit√© 0-100
        """
        if not self.unity_bridge.is_connected():
            logger.debug("‚ö†Ô∏è Unity non connect√©, √©motion non envoy√©e")
            return
        
        # Obtenir mapping VRM
        vrm_data = self.emotion_analyzer.get_vrm_blendshape(emotion, intensity)
        
        # Envoyer √† Unity
        success = self.unity_bridge.set_expression(
            expression_name=vrm_data['blendshape'],
            value=vrm_data['value']
        )
        
        if success:
            logger.info(
                f"‚úÖ √âmotion envoy√©e √† Unity : {vrm_data['blendshape']} "
                f"= {vrm_data['value']:.2f}"
            )
        else:
            logger.warning("‚ö†Ô∏è √âchec envoi √©motion √† Unity")
    
    def get_stats(self) -> Dict:
        """
        R√©cup√®re les statistiques du bot
        
        Returns:
            Dictionnaire avec statistiques
        """
        uptime = datetime.now() - self.start_time
        
        return {
            'connected': self.is_ready(),
            'username': self.user.name if self.user else None,
            'guilds': len(self.guilds) if self.is_ready() else 0,
            'uptime_seconds': uptime.total_seconds(),
            'messages_processed': self.messages_processed,
            'responses_sent': self.responses_sent,
            'auto_reply_enabled': self.auto_reply_enabled,
            'auto_reply_channels': self.auto_reply_channels,
            'rate_limit_seconds': self.rate_limit_seconds
        }


# Instance globale (optionnel, pour usage singleton)
_bot_instance: Optional[KiraDiscordBot] = None


def get_discord_bot(
    chat_engine=None,
    emotion_analyzer=None,
    unity_bridge=None,
    config=None
) -> KiraDiscordBot:
    """
    R√©cup√®re l'instance globale du bot Discord (singleton)
    
    Args:
        chat_engine: ChatEngine (optionnel)
        emotion_analyzer: EmotionAnalyzer (optionnel)
        unity_bridge: UnityBridge (optionnel)
        config: Config (optionnel)
    
    Returns:
        Instance KiraDiscordBot
    """
    global _bot_instance
    
    if _bot_instance is None:
        _bot_instance = KiraDiscordBot(
            chat_engine,
            emotion_analyzer,
            unity_bridge,
            config
        )
    
    return _bot_instance


def run_discord_bot(token: Optional[str] = None):
    """
    Lance le bot Discord
    
    Args:
        token: Token Discord (si None, charge depuis .env)
    """
    # Charger token depuis .env si non fourni
    if token is None:
        load_dotenv()
        token = os.getenv("DISCORD_TOKEN")
    
    if not token:
        raise ValueError(
            "DISCORD_TOKEN non trouv√© ! "
            "D√©finissez-le dans .env ou passez-le en param√®tre."
        )
    
    # Cr√©er et lancer bot
    bot = get_discord_bot()
    
    logger.info("üöÄ Lancement du bot Discord...")
    
    try:
        bot.run(token)
    except Exception as e:
        logger.error(f"‚ùå Erreur lancement bot Discord : {e}")
        raise


if __name__ == "__main__":
    # Lancer le bot directement
    run_discord_bot()
