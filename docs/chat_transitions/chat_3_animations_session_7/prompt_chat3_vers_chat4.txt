# ü§ñ PROMPT DE TRANSITION - Chat 3 ‚Üí Chat 4

**Date de transition** : 20 octobre 2025  
**Chat pr√©c√©dent** : Chat 3 (Session 7 - Animations fluides)  
**Chat suivant** : Chat 4 (Session 8 - √Ä d√©finir)

---

## üìã Instructions pour l'IA du Chat 4

Bonjour ! Je continue le d√©veloppement de **Desktop-Mate**, une application hybride Unity + Python pour afficher un avatar VRM interactif sur le bureau Windows.

### üéØ Contexte rapide

**Projet** : Desktop-Mate (avatar VRM desktop companion)  
**Technologie** : Unity 2022.3 LTS + Python 3.10.9 + PySide6  
**Communication** : IPC via socket TCP (port 5555)  
**√âtat actuel** : Session 7 compl√©t√©e (animations fluides avec Lerp)

### ‚úÖ Ce qui fonctionne actuellement

**Chat 1 (Sessions 0-5)** - MVP ‚úÖ
- Configuration Git
- Setup Python + Unity
- Installation Unity 2022.3 LTS + UniVRM 0.127.3
- Communication IPC Python ‚Üî Unity (socket TCP)
- Chargement mod√®les VRM

**Chat 2 (Session 6)** - Expressions ‚úÖ
- 5 expressions faciales (Joy, Angry, Sorrow, Surprised, Fun)
- Contr√¥le via sliders Python
- VRMBlendshapeController v1.6

**Chat 3 (Session 7)** - Animations ‚úÖ (NOUVEAU)
- Transitions smooth avec Lerp interpolation
- Vitesse ajustable (1.0-10.0)
- Interface fran√ßaise avec ic√¥ne
- Syst√®me mod√®le VRM par d√©faut
- Chargement/d√©chargement dynamique
- Thread-safety complet (Queue<Action> pattern)
- VRMBlendshapeController v2.0

### üìö Documentation disponible

**IMPORTANT** : Avant de commencer, **LIS CES FICHIERS** :

1. **√âtat du projet** :
   - `docs/chat_transitions/chat_3_animations_session_7/CURRENT_STATE.md` ‚Üê √âtat technique complet
   - `docs/chat_transitions/chat_3_animations_session_7/CHAT_SUMMARY.md` ‚Üê R√©sum√© du Chat 3

2. **Session 7 (contexte imm√©diat)** :
   - `docs/sessions/session_7_animations/README.md` ‚Üê Vue d'ensemble
   - `docs/sessions/session_7_animations/TRANSITIONS_GUIDE.md` ‚Üê Guide technique Lerp (900+ lignes)
   - `docs/sessions/session_7_animations/SESSION_SUCCESS.md` ‚Üê R√©capitulatif succ√®s

3. **Session 6 (expressions de base)** :
   - `docs/sessions/session_6_expressions/BLENDSHAPES_GUIDE.md` ‚Üê Syst√®me expressions v1.6

4. **Architecture g√©n√©rale** :
   - `docs/INDEX.md` ‚Üê Arborescence compl√®te du projet
   - `docs/README.md` ‚Üê Documentation principale
   - `README.md` ‚Üê README racine

5. **Instructions syst√®me** :
   - `.github/instructions/copilot-instructions.instructions.md` ‚Üê R√®gles de collaboration

### üöÄ Prochaine √©tape recommand√©e : Session 8

**Option A : Clignement automatique** (üü¢ RECOMMAND√â)
- Difficult√© : FAIBLE (2-3 heures)
- Impact : √âLEV√â (r√©alisme++)
- T√¢ches :
  1. Timer al√©atoire dans Unity (2-5 secondes)
  2. Blendshape "Blink" via syst√®me Lerp existant
  3. Toggle on/off dans interface Python
  4. Param√®tres configurables (fr√©quence, dur√©e)

**Option B : Lip-sync audio**
- Difficult√© : MOYENNE (6-8 heures)
- N√©cessite : sounddevice, numpy, analyse FFT

**Option C : Face tracking**
- Difficult√© : √âLEV√âE (10-15 heures)
- N√©cessite : MediaPipe, webcam

**Option D : IA conversationnelle**
- Difficult√© : TR√àS √âLEV√âE (15-20 heures)
- N√©cessite : API LLM (OpenAI, Anthropic)

### üîß Informations techniques critiques

**Python** :
- Environnement : Python 3.10.9
- Framework : PySide6 (Qt 6)
- Tests : pytest (8/8 passent)
- IPC Client : `src/ipc/unity_bridge.py`
- Config : `src/utils/config.py` (JSON persistant dans `~/.desktop-mate/config.json`)

**Unity** :
- Version : Unity 2022.3.50f1 LTS
- Render Pipeline : URP
- Plugin : UniVRM v0.127.3
- Scripts principaux :
  - `Assets/Scripts/VRMLoader.cs` - Chargement VRM
  - `Assets/Scripts/VRMBlendshapeController.cs` (v2.0) - Expressions + Lerp
  - `Assets/Scripts/IPC/PythonBridge.cs` - Serveur IPC
- Sc√®ne : `Assets/Scenes/MainScene.unity`

**IPC Protocol** (JSON over TCP) :
- Port : 5555 (localhost)
- Commandes disponibles :
  - `load_model` - Charger VRM
  - `unload_model` - D√©charger VRM
  - `set_expression` - D√©finir expression (name, value 0.0-1.0)
  - `reset_expressions` - Reset toutes
  - `set_transition_speed` - Vitesse Lerp (0.1-10.0)

**Thread-safety Unity** :
- TOUJOURS utiliser pattern `Queue<Action>` + `Update()`
- Exemple :
  ```csharp
  private Queue<Action> mainThreadActions = new Queue<Action>();
  
  void Update() {
      lock (mainThreadActions) {
          while (mainThreadActions.Count > 0) {
              mainThreadActions.Dequeue()?.Invoke();
          }
      }
  }
  
  // Depuis thread r√©seau :
  lock (mainThreadActions) {
      mainThreadActions.Enqueue(() => {
          // Unity API call ici
      });
  }
  ```

### üé® Architecture du syst√®me Lerp (Session 7)

**VRMBlendshapeController.cs v2.0** :
```csharp
// Dictionnaires pour transitions smooth
private Dictionary<BlendShapeKey, float> currentValues;
private Dictionary<BlendShapeKey, float> targetValues;
public float transitionSpeed = 2.0f;

// Update() : Lerp chaque frame
void Update() {
    // 1. Ex√©cuter actions IPC (Queue)
    // 2. Lerp vers cibles
    foreach (var key in currentValues.Keys.ToList()) {
        float current = currentValues[key];
        float target = targetValues[key];
        float newValue = Mathf.Lerp(current, target, Time.deltaTime * transitionSpeed);
        currentValues[key] = newValue;
        blendShapeProxy.ImmediatelySetValue(key, currentValues[key]);
    }
}

// LateUpdate() : Apply final
void LateUpdate() {
    if (blendShapeProxy != null) {
        blendShapeProxy.Apply();
    }
}
```

**Formule Lerp** : `newValue = Mathf.Lerp(current, target, Time.deltaTime * transitionSpeed)`
- Plus `transitionSpeed` est √©lev√©, plus c'est **rapide**
- 1.0 = tr√®s lent, 3.0 = normal, 10.0 = tr√®s rapide

### üìã R√®gles de collaboration (IMPORTANT)

**LIRE ABSOLUMENT** : `.github/instructions/copilot-instructions.instructions.md`

**R√®gles critiques** :
1. **üá´üá∑ FRAN√áAIS** : Toute communication en fran√ßais
2. **üìö DOCUMENTATION** : Apr√®s CHAQUE changement, mettre √† jour :
   - `docs/INDEX.md` (si nouveaux fichiers)
   - `docs/README.md` (si architecture modifi√©e)
   - `docs/session_X/` (documentation de session)
3. **üìÇ SCRIPTS DANS SESSIONS** : Copier scripts finaux dans `docs/session_X/scripts/`
4. **üéì P√âDAGOGIE** : L'utilisateur ne conna√Æt PAS Unity ni C#, expliquer clairement
5. **‚úÖ TESTS** : Lancer `pytest` avant de dire "Termin√©"
6. **üìù R√âCAPITULATIF** : Toujours afficher r√©capitulatif avec template :
   ```markdown
   ‚úÖ T√¢che termin√©e !
   
   üìö Documentation mise √† jour :
   - ‚úÖ fichier1.md ‚Üí [changements]
   - ‚úÖ fichier2.md ‚Üí [changements]
   
   üéØ Prochaines √©tapes :
   [...]
   ```

### üö¶ Comment d√©marrer

**1. V√©rifier l'environnement** :
```powershell
cd C:\Dev\desktop-mate
python -m pytest  # Doit passer 8/8 tests
```

**2. Lancer Unity** :
- Ouvrir `unity/DesktopMateUnity/` dans Unity Hub
- Ouvrir sc√®ne `Assets/Scenes/MainScene.unity`
- Play mode

**3. Lancer Python** :
```powershell
python main.py
```

**4. Tester fonctionnalit√©s existantes** :
- Connexion √† Unity
- Charger mod√®le VRM (mod√®le par d√©faut si d√©fini)
- Tester expressions avec sliders
- Tester vitesse de transition (slider 1.0-10.0)
- Tester load/unload

**5. Lire documentation Session 7** :
- `docs/sessions/session_7_animations/README.md` pour contexte
- `docs/sessions/session_7_animations/TRANSITIONS_GUIDE.md` pour d√©tails techniques

### üéØ Objectif sugg√©r√© pour Chat 4

**Session 8 : Clignement automatique** (Recommand√©)

**Pourquoi** :
- Faible difficult√© (parfait pour d√©marrer un nouveau chat)
- R√©utilise syst√®me Lerp existant (d√©j√† √©prouv√©)
- Impact visuel √©lev√© (r√©alisme++)
- Documentation compl√®te disponible

**T√¢ches** :
1. Cr√©er `VRMAutoBlinkController.cs` dans Unity
   - Timer avec `Random.Range(2f, 5f)` pour intervalles
   - M√©thode `StartBlink()` qui :
     - Met blendshape "Blink" √† 1.0 (cible)
     - Attend ~0.1s
     - Remet √† 0.0 (cible)
   - Utilise syst√®me Lerp existant via VRMBlendshapeController

2. Ajouter commande IPC `set_auto_blink`
   - Param√®tre `enabled` (bool)
   - PythonBridge forward vers AutoBlinkController

3. Ajouter toggle Python
   - Checkbox "Clignement automatique" dans onglet Expressions
   - Envoie commande `set_auto_blink` √† Unity

4. Configuration
   - Ajouter champs dans config.json :
     - `avatar.auto_blink.enabled` (bool)
     - `avatar.auto_blink.min_interval` (float, d√©faut 2.0)
     - `avatar.auto_blink.max_interval` (float, d√©faut 5.0)

5. Tests
   - V√©rifier clignements r√©guliers
   - V√©rifier transitions smooth
   - V√©rifier toggle on/off
   - V√©rifier sauvegarde config

6. Documentation Session 8
   - `docs/sessions/session_8_auto_blink/README.md`
   - `docs/sessions/session_8_auto_blink/BLINK_GUIDE.md`
   - `docs/sessions/session_8_auto_blink/scripts/` (copier scripts)
   - Mettre √† jour `docs/INDEX.md` et `docs/README.md`

### üéì Conseils pour Unity/C#

**L'utilisateur ne conna√Æt PAS Unity ni C#** - Expliquer :
1. **O√π cr√©er le fichier** : Chemin exact dans Unity
2. **Comment l'attacher** : GameObject, Inspector, configuration
3. **Concepts C#** : MonoBehaviour, Coroutines, Update(), etc.
4. **Screenshots mentaux** : D√©crire ce qu'il doit voir dans Unity
5. **V√©rification** : Comment tester que √ßa marche

### ‚ö†Ô∏è Pi√®ges √† √©viter

1. **NE PAS oublier** de copier scripts dans `docs/session_X/scripts/`
2. **NE PAS oublier** de mettre √† jour INDEX.md et README.md
3. **NE PAS appeler** Unity API depuis thread r√©seau (toujours Queue)
4. **NE PAS supposer** que l'utilisateur conna√Æt Unity
5. **NE PAS dire "Termin√©"** sans afficher r√©capitulatif complet

### üìä √âtat des tests

**Tests Python** : 8/8 passent ‚úÖ
```powershell
python -m pytest
# test_config.py::TestConfig::test_default_config PASSED
# test_config.py::TestConfig::test_get_config PASSED
# test_config.py::TestConfig::test_set_config PASSED
# test_config.py::TestConfig::test_save_and_load PASSED
# test_unity_bridge.py::TestUnityBridge::test_init PASSED
# test_unity_bridge.py::TestUnityBridge::test_connect_fail PASSED
# test_unity_bridge.py::TestUnityBridge::test_send_command PASSED
# test_unity_bridge.py::TestUnityBridge::test_disconnect PASSED
```

**Unity** : Compile sans erreurs ‚úÖ

### üîó Fichiers cl√©s du projet

**Python** :
- `main.py` - Point d'entr√©e
- `src/gui/app.py` - Interface Qt (890 lignes)
- `src/ipc/unity_bridge.py` - Client IPC (150 lignes)
- `src/utils/config.py` - Configuration (120 lignes)
- `requirements.txt` - D√©pendances

**Unity C#** :
- `unity/DesktopMateUnity/Assets/Scripts/VRMLoader.cs` (250 lignes)
- `unity/DesktopMateUnity/Assets/Scripts/VRMBlendshapeController.cs` (400 lignes - v2.0)
- `unity/DesktopMateUnity/Assets/Scripts/IPC/PythonBridge.cs` (550 lignes)

**Documentation** :
- `docs/INDEX.md` - Arborescence compl√®te
- `docs/README.md` - Doc principale
- `docs/sessions/session_7_animations/` - Contexte Session 7
- `docs/chat_transitions/chat_3_animations_session_7/` - Transition actuelle

### ‚úÖ Checklist avant de commencer

Avant de proposer quoi que ce soit, v√©rifier :

- [ ] J'ai lu `CURRENT_STATE.md`
- [ ] J'ai lu `CHAT_SUMMARY.md`
- [ ] J'ai lu `.github/instructions/copilot-instructions.instructions.md`
- [ ] Je connais l'architecture Lerp (v2.0)
- [ ] Je connais le pattern thread-safety (Queue<Action>)
- [ ] Je sais que l'utilisateur ne conna√Æt pas Unity/C#
- [ ] Je sais qu'il faut copier scripts dans docs/session_X/scripts/
- [ ] Je sais qu'il faut toujours mettre √† jour INDEX.md et README.md

### üéâ Pr√™t √† d√©marrer !

Quand tu es pr√™t, demande-moi :
1. Ce que je veux impl√©menter (probablement clignement automatique)
2. Si j'ai des questions sur l'√©tat actuel
3. Si tout fonctionne correctement (tests, Unity, etc.)

**Rappel** : Toujours communiquer en fran√ßais, expliquer clairement Unity/C#, documenter TOUT, ne JAMAIS oublier les scripts dans docs/session_X/scripts/ !

---

**Bon d√©veloppement pour Session 8 ! üöÄüëÄ‚ú®**
