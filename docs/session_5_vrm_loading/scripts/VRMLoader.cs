using System;
using System.IO;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// VRMLoader - Charge et g√®re les mod√®les VRM (Version simplifi√©e - Import Assets uniquement)
/// </summary>
public class VRMLoader : MonoBehaviour
{
    [Header("VRM Model")]
    [Tooltip("Mod√®le VRM actuellement charg√© (glisse depuis Assets/Models)")]
    public GameObject vrmPrefab;
    
    [Tooltip("Instance du mod√®le actuellement affich√©e")]
    public GameObject currentModel;
    
    [Tooltip("Position de spawn du mod√®le")]
    public Vector3 spawnPosition = new Vector3(0, 0, 0);
    
    private string lastLoadedPath = "";
    private Queue<Action> mainThreadActions = new Queue<Action>();
    
    /// <summary>
    /// Update - Ex√©cute les actions sur le thread principal
    /// </summary>
    void Update()
    {
        // Ex√©cuter toutes les actions en attente sur le thread principal
        lock (mainThreadActions)
        {
            while (mainThreadActions.Count > 0)
            {
                var action = mainThreadActions.Dequeue();
                action?.Invoke();
            }
        }
    }
    
    /// <summary>
    /// Charge le mod√®le VRM depuis le prefab assign√© dans l'Inspector
    /// </summary>
    public void LoadVRMModel()
    {
        try
        {
            Debug.Log($"[VRMLoader] üìÇ Tentative de chargement du mod√®le");
            
            // V√©rifier qu'un prefab est assign√©
            if (vrmPrefab == null)
            {
                Debug.LogError($"[VRMLoader] ‚ùå Aucun prefab VRM assign√© ! Glisse un mod√®le VRM depuis Assets/Models dans l'Inspector.");
                return;
            }
            
            // D√©truire le mod√®le pr√©c√©dent s'il existe
            if (currentModel != null)
            {
                Debug.Log("[VRMLoader] üóëÔ∏è Suppression du mod√®le pr√©c√©dent");
                Destroy(currentModel);
                currentModel = null;
            }
            
            Debug.Log("[VRMLoader] ‚è≥ Instanciation du mod√®le VRM...");
            
            // Instancier le prefab
            currentModel = Instantiate(vrmPrefab, spawnPosition, Quaternion.identity);
            currentModel.transform.localScale = Vector3.one;
            
            Debug.Log($"[VRMLoader] ‚úÖ Mod√®le charg√© avec succ√®s : {currentModel.name}");
            Debug.Log($"[VRMLoader] üìç Position : {currentModel.transform.position}");
            
            // Logger les informations du mod√®le
            LogModelInfo();
        }
        catch (Exception e)
        {
            Debug.LogError($"[VRMLoader] ‚ùå Erreur lors du chargement : {e.Message}");
            Debug.LogError($"[VRMLoader] Stack trace : {e.StackTrace}");
        }
    }
    
    /// <summary>
    /// Charge un mod√®le VRM depuis un chemin de fichier (pour Python)
    /// IMPORTANT: Peut √™tre appel√© depuis n'importe quel thread
    /// </summary>
    public void LoadVRMFromPath(string filePath)
    {
        Debug.Log($"[VRMLoader] üìã Demande de chargement re√ßue : {filePath}");
        
        // Enqueue l'action pour l'ex√©cuter sur le thread principal
        lock (mainThreadActions)
        {
            mainThreadActions.Enqueue(() => {
                Debug.Log($"[VRMLoader] üé≠ Ex√©cution du chargement sur le thread principal");
                LoadVRMModel();
            });
        }
    }
    
    /// <summary>
    /// Affiche les informations du mod√®le charg√©
    /// </summary>
    private void LogModelInfo()
    {
        if (currentModel == null) return;
        
        Debug.Log($"[VRMLoader] ‚ÑπÔ∏è Informations du mod√®le :");
        Debug.Log($"  - Nom : {currentModel.name}");
        Debug.Log($"  - Position : {currentModel.transform.position}");
        Debug.Log($"  - √âchelle : {currentModel.transform.localScale}");
        
        // Lister les SkinnedMeshRenderers
        var skinnedMeshRenderers = currentModel.GetComponentsInChildren<SkinnedMeshRenderer>();
        Debug.Log($"  - Nombre de SkinnedMeshRenderer : {skinnedMeshRenderers.Length}");
        
        foreach (var smr in skinnedMeshRenderers)
        {
            if (smr.sharedMesh != null && smr.sharedMesh.blendShapeCount > 0)
            {
                Debug.Log($"    ‚Ä¢ {smr.name} : {smr.sharedMesh.blendShapeCount} blendshapes");
            }
        }
    }
    
    /// <summary>
    /// Supprime le mod√®le actuel
    /// </summary>
    public void UnloadModel()
    {
        if (currentModel != null)
        {
            Debug.Log("[VRMLoader] üóëÔ∏è Suppression du mod√®le");
            Destroy(currentModel);
            currentModel = null;
            lastLoadedPath = "";
        }
    }
    
    /// <summary>
    /// Retourne le chemin du dernier mod√®le charg√©
    /// </summary>
    public string GetLastLoadedPath()
    {
        return lastLoadedPath;
    }
}
